#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["EnvironmentRoot", "Platform", "Ground"]
    def Xform "EnvironmentRoot" (
        active = true
    )
    {
        reorder nameChildren = ["Playfield", "SkyDome", "Ground", "DirectionalLight_1", "DirectionalLight"]
        float3 xformOp:translate = (0, -2.5, -8)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Cube "Playfield" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["SmoothConcrete", "PlayfieldGround", "Tank", "DirectionalLight_1"]
            rel material:binding = </Root/EnvironmentRoot/Playfield/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (12.5, 0.20833334, 12.5)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "PlayfieldGround" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                reorder nameChildren = ["Tank", "Natural_Cork", "TankOld"]
                rel material:binding = </Root/EnvironmentRoot/Playfield/PlayfieldGround/Natural_Cork> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.9, 0.9, 0.9)
                float3 xformOp:translate = (0, 0.25, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def "Natural_Cork" (
                    active = true
                    references = @NaturalCork.usdz@
                )
                {
                    color3f inputs:Basecolor_Tint = (0.25249678, 0.19549683, 0.13471305) (
                        colorSpace = "srgb_displayp3"
                    )
                    float2 inputs:UV_Scale = (10, 10)
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (1, 1, 1)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "InputTarget"
                {
                    bool allowsDirectInput = 0
                    bool allowsIndirectInput = 1
                    uniform token info:id = "RealityKit.InputTarget"
                }
            }

            def "SmoothConcrete" (
                active = true
                references = @SmoothConcrete.usdz@
            )
            {
            }

            def "Tank" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
                references = @Tank/Tank.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (0.0801, 4.7997, 0.0801)
                float3 xformOp:translate = (0, 0.6999998, 0.4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "DirectionalLight" (
            customData = {
                float3 rotationEulerHint = (-2.1816616, 1.4124441e-7, 6.8063075e-9)
            }
        )
        {
            quatf xformOp:orient = (0.46174854, -0.8870108, 2.9591067e-8, 6.421406e-8)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (0.6229592, 18.812338, 11.757125)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "DirectionalLight"
            {
                token info:id = "RealityKit.DirectionalLight"
                float intensity = 10000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }

        def "SkyDome" (
            active = true
            references = @SkyDome.usdz@
        )
        {
            reorder nameChildren = ["Dome_01", "Ground_01", "Grid", "mtl", "Ground", "Ground"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.02, 0.02, 0.02)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "mtl"
            {
                over "DomeMATSG"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }

                over "GridMATSG"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }

                over "GroundMATSG"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }
            }

            over "Ground_01" (
                active = false
            )
            {
            }

            over "Grid"
            {
            }
        }

        def Cube "Ground" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            rel material:binding = </Root/EnvironmentRoot/Ground/BrownMerinoWool> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 10
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (5, 0.01, 5)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "BrownMerinoWool" (
                active = true
                references = @BrownMerinoWool.usdz@
            )
            {
                color3f inputs:Basecolor_Tint = (0.014721276, 0.1660559, 0.004488263) (
                    colorSpace = "srgb_displayp3"
                )
                float2 inputs:UV_Scale = (5, 5)
            }
        }
    }

    def Xform "Platform" (
        active = true
    )
    {
        def Cylinder "Cylinder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.5
            rel material:binding = </Root/Platform/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.75
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.25, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "SmoothConcrete" (
            active = true
            references = @SmoothConcrete.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0.364288, 0.3015893, 0.13340391) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:mtlx:surface.connect = </Root/Platform/SmoothConcrete/PreviewSurface.outputs:out>
            float2 ui:nodegraph:node:pos = (32.36331, 544.47974)
            int ui:nodegraph:node:stackingOrder = 1
        }
    }
}

