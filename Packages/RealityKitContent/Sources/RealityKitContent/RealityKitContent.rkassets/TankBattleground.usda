#usda 1.0
(
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["EnvironmentRoot", "Platform", "Ground"]
    def Xform "EnvironmentRoot" (
        active = true
    )
    {
        reorder nameChildren = ["PlayfieldOld", "SkyDome", "Ground", "Playfield", "DirectionalLight"]
        float3 xformOp:translate = (0, -2.5, -10)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "DirectionalLight" (
            customData = {
                float3 rotationEulerHint = (-2.1816616, 1.4124441e-7, 6.8063075e-9)
            }
        )
        {
            quatf xformOp:orient = (0.46174854, -0.8870108, 2.9591067e-8, 6.421406e-8)
            float3 xformOp:scale = (0.99999994, 0.99999994, 0.99999994)
            float3 xformOp:translate = (0, 50, -11.75)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "DirectionalLight"
            {
                token info:id = "RealityKit.DirectionalLight"
                float intensity = 5000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }

        def "SkyDome" (
            active = true
            references = @SkyDome.usdz@
        )
        {
            reorder nameChildren = ["Dome_01", "Ground_01", "Grid", "mtl", "Ground", "Ground"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (0.05, 0.05, 0.05)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "mtl"
            {
                over "DomeMATSG"
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex

                    over "DomeMAT"
                    {
                        color3f inputs:diffuseColor = (0.4107481, 0.035188876, 0.019802732) (
                            colorSpace = "srgb_displayp3"
                        )
                        color3f inputs:emissiveColor = (0.2938368, 0.2938368, 0.2938368) (
                            colorSpace = "srgb_displayp3"
                        )
                        delete color3f inputs:emissiveColor.connect = </Root/EnvironmentRoot/SkyDome/mtl/DomeMATSG/file5.outputs:rgb>
                        float inputs:ior = 1.5
                        float inputs:occlusion = 1
                        float inputs:opacity = 1
                        float inputs:roughness = 1
                    }
                }

                over "GridMATSG" (
                    active = false
                )
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }

                over "GroundMATSG" (
                    active = false
                )
                {
                    token outputs:mtlx:surface
                    token outputs:realitykit:vertex
                }
            }

            over "Ground_01" (
                active = false
            )
            {
            }

            over "Grid" (
                active = false
            )
            {
            }
        }

        def Cube "Ground" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            reorder nameChildren = ["BrownMerinoWool", "Material"]
            rel material:binding = </Root/EnvironmentRoot/Ground/Material> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double size = 10
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (12, 0.01, 12)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def "BrownMerinoWool" (
                active = false
                references = @BrownMerinoWool.usdz@
            )
            {
                color3f inputs:Basecolor_Tint = (0.640408, 0.47749925, 0.055819876) (
                    colorSpace = "srgb_displayp3"
                )
                float2 inputs:UV_Scale = (10, 10)
            }

            def Material "Material"
            {
                token outputs:mtlx:surface
                token outputs:realitykit:vertex
                token outputs:surface.connect = </Root/EnvironmentRoot/Ground/Material/UsdPreviewSurface.outputs:surface>

                def Shader "UsdPreviewSurface"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    color3f inputs:diffuseColor = (0.39023042, 0.27827176, 0.11389024) (
                        colorSpace = "srgb_displayp3"
                    )
                    float inputs:roughness = 0.9
                    token outputs:surface
                }
            }
        }

        def Xform "Playfield" (
            active = true
        )
        {
            reorder nameChildren = ["Concrete", "PlayfieldGround", "PlayerTank", "ExplosionEmitter", "ExplosionEmitter_1", "EnemyTank"]
            def Cube "Concrete" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                reorder nameChildren = ["SmoothConcrete", "PlayfieldGround", "Tank", "Missile"]
                rel material:binding = </Root/EnvironmentRoot/Playfield/Concrete/SmoothConcrete> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (12.5, 0.20833334, 12.5)
                float3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def "SmoothConcrete" (
                    active = true
                    references = @SmoothConcrete.usdz@
                )
                {
                }
            }

            def Cube "PlayfieldGround" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                reorder nameChildren = ["Tank", "Natural_Cork", "TankOld"]
                rel material:binding = </Root/EnvironmentRoot/Playfield/PlayfieldGround/Natural_Cork> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 1
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (11.25, 0.1875, 11.25)
                float3 xformOp:translate = (0, 0.052083254, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def "Natural_Cork" (
                    active = true
                    references = @NaturalCork.usdz@
                )
                {
                    color3f inputs:Basecolor_Tint = (0.25249678, 0.19549683, 0.13471305) (
                        colorSpace = "srgb_displayp3"
                    )
                    float2 inputs:UV_Scale = (10, 10)
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def RealityKitComponent "Collider"
                {
                    uint group = 1
                    uniform token info:id = "RealityKit.Collider"
                    uint mask = 4294967295
                    token type = "Default"

                    def RealityKitStruct "Shape"
                    {
                        float3 extent = (1, 1, 1)
                        token shapeType = "Box"

                        def RealityKitStruct "pose"
                        {
                        }
                    }
                }

                def RealityKitComponent "InputTarget"
                {
                    bool allowsDirectInput = 0
                    bool allowsIndirectInput = 1
                    uniform token info:id = "RealityKit.InputTarget"
                }
            }

            def "PlayerTank" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
                references = @Tank/Tank.usda@
            )
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.145, 4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "TankRoot"
                {
                    over "Body"
                    {
                        over "BodyPaint"
                        {
                            color3f inputs:Basecolor_Tint = (0.37254903, 0.36862746, 0.32941177) (
                                colorSpace = "srgb_displayp3"
                            )
                        }
                    }

                    over "Cannon"
                    {
                        over "CannonRoot"
                        {
                            over "ScratchedMetallicPaint"
                            {
                                color3f inputs:Basecolor_Tint = (0.033858042, 0, 0.92779356) (
                                    colorSpace = "srgb_displayp3"
                                )
                            }
                        }
                    }

                    over "WheelsRight"
                    {
                        over "ScratchedMetallicPaint"
                        {
                            color3f inputs:Basecolor_Tint = (0.105882354, 0.08627451, 0.5254902) (
                                colorSpace = "srgb_displayp3"
                            )
                        }
                    }

                    over "WheelsLeft"
                    {
                        over "ScratchedMetallicPaint"
                        {
                            color3f inputs:Basecolor_Tint = (0.105882354, 0.08627451, 0.5254902) (
                                colorSpace = "srgb_displayp3"
                            )
                        }
                    }
                }
            }

            def Xform "ExplosionEmitter"
            {
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.2, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "VFXEmitter"
                {
                    token info:id = "RealityKit.VFXEmitter"

                    def RealityKitStruct "currentState"
                    {
                        token birthDirection = "Normal"
                        token birthLocation = "Volume"
                        float3 emissionDirection = (0, 1, 0)
                        double emissionDuration = 0.05
                        double emissionDurationVariation = 0
                        token emitterShape = "Sphere"
                        double idleDuration = 5
                        double idleDurationVariation = 0
                        bool isLocal = 0
                        bool isSpawningEnabled = 0
                        bool loops = 0
                        float particleSpeed = 0.5
                        float particleSpeedVariation = 0.1
                        float3 shapeSize = (0.4, 0.4, 0.4)
                        bool spawnInheritParentColor = 0
                        token spawnOccasion = "OnDeath"
                        float spawnSpreadFactor = 0
                        float spawnSpreadFactorVariation = 0
                        float spawnVelocityFactor = 1
                        double warmupDuration = 0

                        def RealityKitStruct "mainEmitter"
                        {
                            float3 acceleration = (0, -0.05, 0)
                            token animationRepeatMode = "PlayOnce"
                            token billboardMode = "Billboard"
                            float birthRate = 10000
                            float birthRateVariation = 0
                            token blendMode = "Alpha"
                            float colorEvolutionPower = 1
                            int64 columnCount = 4
                            float dampingFactor = 8
                            float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                            float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                            float frameRate = 0
                            float frameRateVariation = 0
                            int64 initialFrame = 2
                            int64 initialFrameVariation = 6
                            bool isAnimated = 1
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 0
                            float noiseScale = 1
                            float noiseStrength = 0.1
                            token opacityOverLife = "LinearFadeOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 1
                            asset particleImage = @ParticleEmitterPresetTextures/dustsheet.exr@
                            double particleLifeSpan = 1
                            double particleLifeSpanVariation = 1
                            float particleMass = 1
                            float particleMassVariation = 0.8
                            float particleSize = 0.2
                            float particleSizeVariation = 0
                            float3 radialGravityCenter = (0, -0.1, 0)
                            float radialGravityStrength = -0.1
                            int64 rowCount = 4
                            float sizeMultiplierAtEndOfLifespan = 2
                            float sizeMultiplierAtEndOfLifespanPower = 0.2
                            token sortOrder = "DecreasingDepth"
                            float spreadingAngle = 0
                            float4 startColorA = (0.7779445, 0, 0, 0.26)
                            float4 startColorB = (0, 0, 0, 0.07)
                            float stretchFactor = 0
                            bool useEndColor = 0
                            bool useEndColorRange = 0
                            bool useStartColorRange = 1
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }

                        def RealityKitStruct "spawnedEmitter"
                        {
                        }
                    }
                }
            }

            def Xform "ExplosionEmitter_1" (
                active = false
            )
            {
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.20000005, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def RealityKitComponent "VFXEmitter"
                {
                    token info:id = "RealityKit.VFXEmitter"

                    def RealityKitStruct "currentState"
                    {
                        token birthDirection = "Normal"
                        token birthLocation = "Volume"
                        float3 emissionDirection = (0, 1, 0)
                        double emissionDuration = 0.05
                        double emissionDurationVariation = 0
                        token emitterShape = "Sphere"
                        double idleDuration = 5
                        double idleDurationVariation = 0
                        bool isLocal = 0
                        bool isSpawningEnabled = 0
                        bool loops = 0
                        float particleSpeed = 0.5
                        float particleSpeedVariation = 0.1
                        float3 shapeSize = (0.4, 0.4, 0.4)
                        bool spawnInheritParentColor = 0
                        token spawnOccasion = "OnDeath"
                        float spawnSpreadFactor = 0
                        float spawnSpreadFactorVariation = 0
                        float spawnVelocityFactor = 1
                        double warmupDuration = 0

                        def RealityKitStruct "mainEmitter"
                        {
                            float3 acceleration = (0, -0.05, 0)
                            token animationRepeatMode = "PlayOnce"
                            token billboardMode = "Billboard"
                            float birthRate = 10000
                            float birthRateVariation = 0
                            token blendMode = "Alpha"
                            float colorEvolutionPower = 1
                            int64 columnCount = 4
                            float dampingFactor = 8
                            float4 endColorA = (0.0013309671, 0.03458923, 1, 1)
                            float4 endColorB = (0.11386989, 0.0064959256, 0.10626237, 1)
                            float frameRate = 0
                            float frameRateVariation = 0
                            int64 initialFrame = 2
                            int64 initialFrameVariation = 6
                            bool isAnimated = 1
                            bool isLightingEnabled = 0
                            float noiseAnimationSpeed = 0
                            float noiseScale = 1
                            float noiseStrength = 0.1
                            token opacityOverLife = "LinearFadeOut"
                            float particleAngle = 0
                            float particleAngleVariation = 0
                            float particleAngularVelocity = 0
                            float particleAngularVelocityVariation = 1
                            asset particleImage = @ParticleEmitterPresetTextures/dustsheet.exr@
                            double particleLifeSpan = 1
                            double particleLifeSpanVariation = 1
                            float particleMass = 1
                            float particleMassVariation = 0.8
                            float particleSize = 0.2
                            float particleSizeVariation = 0
                            float3 radialGravityCenter = (0, -0.1, 0)
                            float radialGravityStrength = -0.1
                            int64 rowCount = 4
                            float sizeMultiplierAtEndOfLifespan = 2
                            float sizeMultiplierAtEndOfLifespanPower = 0.2
                            token sortOrder = "DecreasingDepth"
                            float spreadingAngle = 0
                            float4 startColorA = (0.899971, 0.15391146, 0, 0.26)
                            float4 startColorB = (0.95968837, 0.9596883, 0.9596883, 0.07)
                            float stretchFactor = 0
                            bool useEndColor = 0
                            bool useEndColorRange = 0
                            bool useStartColorRange = 1
                            float3 vortexDirection = (0, 1, 0)
                            float vortexStrength = 0
                        }

                        def RealityKitStruct "spawnedEmitter"
                        {
                        }
                    }
                }
            }

            def "EnemyTank" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 0, 0)
                }
                references = @Tank/Tank.usda@
            )
            {
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (1, 0, 0, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 0.145, -4)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                over "TankRoot"
                {
                    over "Cannon"
                    {
                        over "CannonRoot"
                        {
                            over "ScratchedMetallicPaint"
                            {
                                color3f inputs:Basecolor_Tint = (0.66982037, 0.12284724, 0.013632257) (
                                    colorSpace = "srgb_displayp3"
                                )
                            }
                        }
                    }

                    over "Body"
                    {
                        over "BodyPaint"
                        {
                            color3f inputs:Basecolor_Tint = (0.37254903, 0.36862746, 0.32941177) (
                                colorSpace = "srgb_displayp3"
                            )
                        }
                    }

                    over "WheelsRight"
                    {
                        over "ScratchedMetallicPaint"
                        {
                            color3f inputs:Basecolor_Tint = (0.42352942, 0.05490196, 0.019607844) (
                                colorSpace = "srgb_displayp3"
                            )
                        }
                    }

                    over "WheelsLeft"
                    {
                        over "ScratchedMetallicPaint"
                        {
                            color3f inputs:Basecolor_Tint = (0.42352942, 0.05490196, 0.019607844) (
                                colorSpace = "srgb_displayp3"
                            )
                        }
                    }
                }
            }
        }

        def Xform "DirectionalLight_1" (
            customData = {
                float3 rotationEulerHint = (-0.9917534, 2.913958e-8, -7.957405e-8)
            }
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (-0.8795519, 0.47580293, -3.174567e-8, 2.8062408e-8)
            float3 xformOp:scale = (0.9999999, 0.9999999, 0.9999999)
            float3 xformOp:translate = (0, 50, -11.75)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def RealityKitComponent "DirectionalLight"
            {
                token info:id = "RealityKit.DirectionalLight"
                float intensity = 5000

                def RealityKitStruct "Shadow"
                {
                }
            }
        }
    }

    def Xform "Platform" (
        active = true
    )
    {
        def Cylinder "Cylinder" (
            active = true
            prepend apiSchemas = ["MaterialBindingAPI"]
        )
        {
            uniform token axis = "Y"
            double height = 0.2
            rel material:binding = </Root/Platform/SmoothConcrete> (
                bindMaterialAs = "weakerThanDescendants"
            )
            double radius = 0.75
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, -0.1, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "SmoothConcrete" (
            active = true
            references = @SmoothConcrete.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0.0024306057, 0.0025252525, 0.0024473388) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:mtlx:surface.connect = </Root/Platform/SmoothConcrete/PreviewSurface.outputs:out>
            float2 ui:nodegraph:node:pos = (32.36331, 544.47974)
            int ui:nodegraph:node:stackingOrder = 1
        }
    }
}

