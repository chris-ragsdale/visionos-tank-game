#usda 1.0
(
    customLayerData = {
        string creator = "Reality Composer Pro Version 2.0 (448.60.4)"
    }
    defaultPrim = "Root"
    metersPerUnit = 1
    upAxis = "Y"
)

def Xform "Root"
{
    reorder nameChildren = ["TankRoot", "Collider", "HealthAttachment"]
    float3 xformOp:translate = (0, 0, 0)
    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

    def Xform "TankRoot" (
        active = true
        customData = {
            float3 rotationEulerHint = (0, 1.5707963, 0)
        }
    )
    {
        reorder nameChildren = ["Body", "WheelsRight", "WheelsLeft", "Cannon", "BodyPaint", "WheelPaint", "RoadWheelPaint", "CannonPaint", "BodyPaintEnemy", "RoadWheelPaintEnemy", "CannonPaintEnemy"]
        quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
        float3 xformOp:scale = (1.0000001, 1, 1.0000001)
        float3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

        def Xform "Body" (
            active = true
        )
        {
            reorder nameChildren = ["BodyPaint", "Body"]
            float2 ui:nodegraph:node:pos = (33.23831, 471.47977)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Cube "Body" (
                active = true
                prepend apiSchemas = ["MaterialBindingAPI"]
            )
            {
                rel material:binding = </Root/TankRoot/BodyPaint> (
                    bindMaterialAs = "weakerThanDescendants"
                )
                double size = 0.2
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (1, 0, 8.6850335e-8, 0)
                float3 xformOp:scale = (5, 0.6599999, 3.5)
                float3 xformOp:translate = (0, 0.099999994, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
            }
        }

        def Xform "WheelsRight" (
            active = true
        )
        {
            reorder nameChildren = ["WheelPaint", "RoadWheelPaint", "Wheels"]
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.05, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "Wheels" (
                active = true
            )
            {
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (1, 0, 8.685033e-8, 0)
                float3 xformOp:scale = (1.5, 1, 0.9999999)
                float3 xformOp:translate = (0, 0, 0.15)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Capsule "Roadwheel" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    customData = {
                        float3 rotationEulerHint = (0, 0, 1.5707964)
                    }
                )
                {
                    uniform token axis = "Y"
                    double height = 0.2
                    rel material:binding = </Root/TankRoot/RoadWheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    quatf xformOp:orient = (0.70710677, -4.2489138e-17, -4.2489118e-17, 0.70710677)
                    float3 xformOp:scale = (0.69999987, 1.4999998, 0.49999994)
                    float3 xformOp:translate = (-2.7939675e-9, 0.042499997, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (0.19999999, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel_1" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
                    int ui:nodegraph:node:stackingOrder = 1
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (0.06999999, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel_2" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    float2 ui:nodegraph:node:pos = (52.36331, 491.47977)
                    int ui:nodegraph:node:stackingOrder = 2
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (-0.07, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel_3" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    float2 ui:nodegraph:node:pos = (72.36331, 511.47977)
                    int ui:nodegraph:node:stackingOrder = 3
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (-0.19999999, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def Xform "WheelsLeft" (
            active = true
        )
        {
            reorder nameChildren = ["WheelPaint", "RoadWheelPaint", "Wheels"]
            float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0.05, -0.3894397)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "Wheels" (
                active = true
            )
            {
                float2 ui:nodegraph:node:pos = (20, 20)
                int ui:nodegraph:node:stackingOrder = 1
                quatf xformOp:orient = (1, 0, 8.685033e-8, 0)
                float3 xformOp:scale = (1.5, 1, 0.9999999)
                float3 xformOp:translate = (-3.4099244e-17, 0, -0.15)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Capsule "Roadwheel" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                    customData = {
                        float3 rotationEulerHint = (0, 0, 1.5707964)
                    }
                )
                {
                    uniform token axis = "Y"
                    double height = 0.2
                    rel material:binding = </Root/TankRoot/RoadWheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    quatf xformOp:orient = (0.70710677, -4.2489138e-17, -4.2489118e-17, 0.70710677)
                    float3 xformOp:scale = (0.69999987, 1.4999998, 0.49999994)
                    float3 xformOp:translate = (-2.7939677e-9, 0.042499997, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (0.19999999, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel_1" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
                    int ui:nodegraph:node:stackingOrder = 1
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (0.06999999, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel_2" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    float2 ui:nodegraph:node:pos = (52.36331, 491.47977)
                    int ui:nodegraph:node:stackingOrder = 2
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (-0.07, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Sphere "Wheel_3" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/WheelPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double radius = 0.1
                    float2 ui:nodegraph:node:pos = (72.36331, 511.47977)
                    int ui:nodegraph:node:stackingOrder = 3
                    quatf xformOp:orient = (1, 0, 4.0011872e-16, 0)
                    float3 xformOp:scale = (0.59999996, 0.59999996, 0.59999996)
                    float3 xformOp:translate = (-0.19999999, 0, 0.19999999)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def Xform "Cannon" (
            active = true
        )
        {
            float2 ui:nodegraph:node:pos = (20, 20)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 8.685033e-8, 0)
            float3 xformOp:scale = (0.9999999, 0.9999999, 0.9999999)
            float3 xformOp:translate = (0, 0.19999999, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            def Xform "CannonRoot" (
                active = true
                customData = {
                    float3 rotationEulerHint = (0, 1.5707963, 0)
                }
            )
            {
                reorder nameChildren = ["Base", "Shaft", "End", "CannonPaint"]
                quatf xformOp:orient = (0.70710677, 0, 0.70710677, 0)
                float3 xformOp:scale = (1, 1, 1)
                float3 xformOp:translate = (0, 1.4901161e-8, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

                def Cube "Base" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/CannonPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.1
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (2, 1, 2)
                    float3 xformOp:translate = (0, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "Shaft" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/CannonPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.1
                    float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
                    int ui:nodegraph:node:stackingOrder = 1
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (3.5, 0.5, 0.5)
                    float3 xformOp:translate = (0.25, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }

                def Cube "End" (
                    active = true
                    prepend apiSchemas = ["MaterialBindingAPI"]
                )
                {
                    rel material:binding = </Root/TankRoot/CannonPaint> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    double size = 0.1
                    float2 ui:nodegraph:node:pos = (52.36331, 491.47977)
                    int ui:nodegraph:node:stackingOrder = 2
                    quatf xformOp:orient = (1, 0, 0, 0)
                    float3 xformOp:scale = (0.3, 0.3, 0.3)
                    float3 xformOp:translate = (0.42, 0, 0)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
                }
            }
        }

        def "BodyPaint" (
            active = true
            references = @../ScratchedMetallicPaint.usdz@
        )
        {
            color3f inputs:Basecolor_Tint
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "PreviewSurface"
            {
                delete float inputs:metallic.connect = </Root/TankRoot/Body/BodyPaint/Metallic.outputs:out>
                int ui:nodegraph:node:stackingOrder = 2347
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }
        }

        def "WheelPaint" (
            active = true
            references = @../BlackABSPlastic.usdz@
        )
        {
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
        }

        def "RoadWheelPaint" (
            active = true
            references = @../ScratchedMetallicPaint.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0.25230423, 0.26606822, 0.2686453) (
                colorSpace = "srgb_displayp3"
            )
        }

        def "CannonPaint" (
            active = true
            references = @../ScratchedMetallicPaint.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0.024134954, 0, 0.66982037) (
                colorSpace = "srgb_displayp3"
            )

            over "PreviewSurface"
            {
                delete float inputs:metallic.connect = </Root/TankRoot/Cannon/CannonRoot/ScratchedMetallicPaint/Metallic.outputs:out>
            }
        }

        def "BodyPaintEnemy" (
            active = true
            references = @../ScratchedMetallicPaint.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0.34031492, 0.3615846, 0.3615846) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:mtlx:surface.connect = </Root/TankRoot/BodyPaintEnemy/PreviewSurface.outputs:out>
            float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
            int ui:nodegraph:node:stackingOrder = 1
            quatf xformOp:orient = (1, 0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            float3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]

            over "PreviewSurface"
            {
                float inputs:metallic.connect = </Root/TankRoot/BodyPaintEnemy/Metallic.outputs:out>
                int ui:nodegraph:node:stackingOrder = 2347
                string[] ui:nodegraph:realitykit:node:attributesShowingChildren = []
            }
        }

        def "RoadWheelPaintEnemy" (
            active = true
            references = @../ScratchedMetallicPaint.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0.24293718, 0.022186723, 0.012757544) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:mtlx:surface.connect = </Root/TankRoot/RoadWheelPaintEnemy/PreviewSurface.outputs:out>
            float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
            int ui:nodegraph:node:stackingOrder = 1
        }

        def "CannonPaintEnemy" (
            active = true
            references = @../ScratchedMetallicPaint.usdz@
        )
        {
            color3f inputs:Basecolor_Tint = (0.6645952, 0.055853143, 0) (
                colorSpace = "srgb_displayp3"
            )
            token outputs:mtlx:surface.connect = </Root/TankRoot/CannonPaintEnemy/PreviewSurface.outputs:out>
            float2 ui:nodegraph:node:pos = (32.36331, 471.47977)
            int ui:nodegraph:node:stackingOrder = 1

            over "PreviewSurface"
            {
                float inputs:metallic.connect = </Root/TankRoot/CannonPaintEnemy/Metallic.outputs:out>
            }
        }
    }

    def RealityKitComponent "Collider"
    {
        uint group = 1
        uniform token info:id = "RealityKit.Collider"
        uint mask = 4294967295
        token type = "Default"

        def RealityKitStruct "Shape"
        {
            float3 extent = (0.8449999, 0.26, 1)
            token shapeType = "Box"

            def RealityKitStruct "pose"
            {
                float3 position = (-0.012499943, 0.120000005, 0)
            }
        }
    }

    def Xform "HealthAttachment" (
        active = true
    )
    {
        float3 xformOp:translate = (0, 0.6, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:orient", "xformOp:scale"]
    }
}

